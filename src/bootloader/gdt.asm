; Байтовая система Глобальной Таблицы Дескрипторов(GDT):
; 10011010b -
; present flag:     1
; privilege flag:   00
; descriptor type:  1
; code:             1
; confirming flag:  0
; readable:         1
; accessed:         0
;
; 11001111b -
; granularity:      1
; 32-bit default:   1
; 64-bit default:   0
; available(AVL):   1
; Остальное - длинна сегмента.

; - present flag (флаг присутствия). Если его значение "1", то это
; указывает, что сегмент присутствует в памяти (это нужно для виртуальной памяти)

; - privilege flag (флаг привилегии). Значение "0" - самый высокий уровень привелегий

; - descriptor type (тип дескриптора). "1" - для сегмента кода или сегмента данных

; - code (флаг кода). "1" - для кода, "0" - для даннных
; - conformig (флаг подчинения). "0" - чтобы код в другом сегменте с
; более низким уровнем привилегий не смог вызвать код из этого сегмента -
; это ключ к защите памяти (memory protection).

; (code) - readable (читаемость). "1" - если читаемый, "0" - только исполняемый.
; (data) - writable. Разрешает сегменту данных быть записываемым, в противном
; случае, он будет доступен только для чтения.

; - accessed (флаг доступа). Этот флаг устанавливается, когда происходит
; обращение к сегменту.

; - granulariy (гранулярность). "0" - байтовая гранулярность, лимит
; задается в байтах, если "1" - страничная гранулярность, в 4кб блоках.
; Если выбрать страничную гранулярность и установить значение лимита как
; 0xFFFFF, то лимит умножится на 16*16*16 (4кб), и лимит станет 0xFFFFF000
; позволяя нашему сегменту занять 4гб места в памяти.

; - 32-bit default. "1" - т.к. наш сегмент будет содержать 32-битный код.

; - 64-bit default. "0" - т.к. не используется на 32-битных
;	процессорах.

; - AVL (available). Определяет доступность сегмента для использования
; системным программным обеспечением (используются только ОС).

; https://wiki.osdev.org/Global_Descriptor_Table

gdt_start:                          ; Метка старта для удобного подсчёта длинны дескриптора.


gdt_null:                           ; Нулевой дескриптор, необходим для GDT.
    dd 0x0
    dd 0x0

gdt_code:                           ; Дескриптор сегиента кода.
    dw 0xFFFF                       ; Limit(биты 0-15)
    dw 0x0                          ; Base(биты 0-15)
    db 0x0                          ; Base(биты 16-23)

    db 10011010b                    ; ^
    db 11001111b                    ; ^

    db 0x0                          ; Base(биты 24-31)

gdt_data:                           ; Дескриптор сегмента данных.
    dw 0xFFFF                       ; Limit(биты 0-15)
    dw 0x0                          ; Base(биты 0-15)
    db 0x0                          ; Base(биты 16-23)

    db 10010010b                    ; ^
    db 11001111b                    ; ^

    db 0x0                          ; Base(биты 24-31)


gdt_end:                            ; Метка конца для удобного подсчёта длинны дескриптора.


gdt_descriptor:                     ; Дескриптор GDT.
    dw gdt_end - gdt_start - 1      ; Размер GDT.
    dd gdt_start                    ; Адрес начала GDT.


CODE_SEG equ gdt_code - gdt_start   ; Необходимые переменные для остального кода
DATA_SEG equ gdt_data - gdt_start
